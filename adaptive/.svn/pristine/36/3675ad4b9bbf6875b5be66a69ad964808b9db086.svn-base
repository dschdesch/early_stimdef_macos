function S = THRcurve(P, Proc, Freq, BurstDur, ISI, MinSPL, MaxSPL, StartSPL, StepSPL, DAchan, SpikeCrit, MaxNpres)
% THRcurve - adaptive measurement of tonal threshold for a range of
% frequencies
% Usage:
%   THRcurve(P, ToneFreq, BurstDur, MinSPL, MaxSPL, StartSPL,
%   StepSPL, DAchan, MaxNpres);

% Create dataset
DS = dataset(P.Experiment, P, [], P.GUIhandle, 'Dataset');

% Load circuit
dev = P.Experiment.Audio.Device;
Fsam = sys3loadCircuit('THR', dev, 110);
sys3run(dev); % in fact still halted until setting 'Run' to 1

% Set non-changing parameters
sys3setpar(BurstDur, 'BurstDur', dev);
NonBurstDur = ISI-BurstDur;
if NonBurstDur < 0
    GUImessage(figh,'Burst duration exceeds ISI.', ...
    'error', {'BurstDur', 'ISI'});
else
    sys3setpar(NonBurstDur, 'NonBurstDur', dev); 
end

% Determine spontaneous rate criterion
[dum, SR] = local_getSpikeCrit(dev, BurstDur);
if isequal(Proc,'Geisler'), SpikeCrit = dum; end;
SRStr = ['SR = ' num2str(SR) ' spikes/s'];
THRStr = '';
% Create plot
Thr = nan(size(Freq));
figure;
h = semilogx(Freq,Thr,'-sb','YDataSource','Thr');
x = logspace(log10(min(Freq)),log10(max(Freq)),10);
set(gca,'xtick',x); 
set(gca,'xticklabel',x);
xlim([min(x) max(x)]);
ylim([MinSPL MaxSPL]);
xlabel('frequency (Hz)','fontsize',10);
ylabel('threshold (dB SPL)','fontsize',10);
title(IDstring(DS, 'full'),'fontsize', 12, 'fontweight', 'bold', 'interpreter', 'none');
text(0.1, 0.1, SRStr, 'units', 'normalized', 'color', 'r', 'fontsize', 12 , 'interpreter', 'latex');
ht = text(0.1, 0.2, THRStr, 'units', 'normalized', 'color', 'r', 'fontsize', 12 , 'interpreter', 'latex');
timestr = datestr(clock,30);

% Determine order
ifreqs = 1:numel(Freq);
if strcmpi(P.Order(1),'R')
    ifreqs = fliplr(ifreqs);    
end

% Calculate # SPLs per Freq
NbSPL = size(P.LinAmp,1)/size(P.Freq,1);

% Set starting SPL
dynStartSPL = StartSPL;

for ifreq=ifreqs,
    GUImessage(gcg, ['Measuring threshold at frequency ', num2str(Freq(ifreq))]);
    % STOP button action
    if MyFlag('THRstop'),
        save(DS);
        break; % from loop
    end
    ic = (1+(ifreq-1)*NbSPL:ifreq*NbSPL)';
    % Get correct LinAmp and Attenuations
    SPL = P.SPLs;
    LinAmp = P.LinAmp(ic,:);
    Attenuation = P.Attenuations(ifreq,:);
    S(ifreq) = feval(['THRrec_' Proc], dev, P.Experiment, Freq(ifreq), BurstDur, ...
        MinSPL, MaxSPL, dynStartSPL, StepSPL, DAchan, SpikeCrit, MaxNpres, ...
        SPL, Attenuation, LinAmp, P.GUIhandle,P.ISI);
    if ~isnan(S(ifreq).Thr),
        if isequal(Proc,'Geisler')
            dynStartSPL = S(ifreq).Thr - 2*StepSPL;
        else
            dynStartSPL = S(ifreq).Thr;
        end
    end
    Thr(ifreq) = S(ifreq).Thr;
    
    % Attempt to force resetting the timing of play action
    sys3halt(dev); 
    sys3run(dev);
    % Show THR and CF on plot
    [THR, imin] = min(Thr);
    THRStr = ['THR = ' num2str(THR) ' dB SPL @ ' num2str(Freq(imin)) ' Hz'];
    set(ht,'String',THRStr);
    % Refresh plot
    refreshdata(h,'caller') % Evaluate y in the function workspace
    drawnow
    % save data
    DS = addThr(DS,Thr);
    % keep old save format as backup
    save([folder(current(experiment)),'\THR_',timestr,'.mat'],'S','-mat');
end

sys3halt(dev);
save(DS);

end

function [SpikeCrit, SR] = local_getSpikeCrit(dev, BurstDur)
    GUImessage(gcg, 'Measuring spontaneous rate.');
    NbSpikes = zeros(1,20);
    Nrep = ceil(15*1e3/(BurstDur+10));
    for i=1:Nrep
        sys3setpar(0, 'ToneAmpL', dev);
        sys3setpar(0, 'ToneAmpR', dev);
        sys3setpar(0, 'ToneFreq', dev);
        sys3setpar(1, 'Run', 'RX6');
        pause((BurstDur+10)/1e3);
        sys3setpar(0, 'Run', 'RX6');
        NbSpikes(i) = sys3getpar('NbSpikes', dev);
    end
    SpikeCrit = round(mean(NbSpikes) + std(NbSpikes)) + 1.5;
    SR = mean(NbSpikes)/((BurstDur+10)/1e3);
end